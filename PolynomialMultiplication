 import java.util.*;
 class PolyNode{
	int coefficient;
	int power;
	PolyNode next;
	PolyNode(){}
	PolyNode(int coe,int pow){
		coefficient=coe;
		power=pow;
		next=null;
	}
}
public class PolynomialMultiplication{
	public PolyNode multiplyPolynomials(PolyNode poly1,PolyNode poly2){
		if(poly1==null||poly2==null)return null;
		TreeMap<Integer,Integer>map=new TreeMap<>(Collections.reverseOrder());
		for(PolyNode p1=poly1;p1!=null;p1=p1.next){
			for(PolyNode p2=poly2;p2!=null;p2=p2.next){
				int newPower=p1.power+p2.power;
				int newcoef=p1.coefficient*p2.coefficient;
				map.put(newPower,map.getOrDefault(newPower,0)+newcoef);
			}
		}
		PolyNode dummy=new PolyNode(0,0);
		PolyNode current=dummy;
	for(Map.Entry<Integer,Integer>entry:map.entrySet()){
		int coe=entry.getValue();
		int pow=entry.getKey();
		if(coe!=0){
			current.next=new PolyNode(coe,pow);
			current=current.next;
		}
	}
	  return dummy.next;
	}
    public void printPolynomial(PolyNode head){
		while(head!=null){
			System.out.print(head.coefficient+"x^"+head.power);
			if(head.next!=null)
				System.out.print("+");
			head=head.next;
		}
		System.out.println();
	}
    public static void main(String[]args){
			PolynomialMultiplication pm=new PolynomialMultiplication();
			PolyNode poly1=new PolyNode(8,2);
			poly1.next=new PolyNode(10,1);
			poly1.next.next=new PolyNode(2,0);
			PolyNode poly2=new PolyNode(9,2);
			poly2.next=new PolyNode(3,0);
			System.out.println("poly1");
			pm.printPolynomial(poly1);
			System.out.println("poly2");
			pm.printPolynomial(poly2);
			PolyNode result=pm.multiplyPolynomials(poly1,poly2);
			System.out.println("Result:");
			pm.printPolynomial(result);
		}
	}
			
		
				
